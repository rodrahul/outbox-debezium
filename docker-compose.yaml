version: '2'
services:
  jaeger:
    image: jaegertracing/all-in-one:1.52
    ports:
      - 4317:4317
      - 16686:16686
    environment:
      - COLLECTOR_OTLP_ENABLED=true
  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  order-db:
    # image: quay.io/debezium/example-postgres:${DEBEZIUM_VERSION}
    image: postgres:16.1
    ports:
     - 5433:5432
    healthcheck:
      test: "pg_isready -U postgresuser -d orderdb"
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
     - POSTGRES_USER=postgresuser
     - POSTGRES_PASSWORD=postgrespw
     - POSTGRES_DB=orderdb
     - PGPASSWORD=postgrespw
  
  # shipment-db:
  #   image: quay.io/debezium/example-postgres:${DEBEZIUM_VERSION}
  #   ports:
  #     - 5434:5432
  #   healthcheck:
  #     test: "pg_isready -U postgresuser -d shipmentdb"
  #     interval: 2s
  #     timeout: 20s
  #     retries: 10
  #   environment:
  #     - POSTGRES_USER=postgresuser
  #     - POSTGRES_PASSWORD=postgrespw
  #     - POSTGRES_DB=shipmentdb
  #     - PGPASSWORD=postgrespw
  
  # --------------------------------
  # Run this if you want to have a pgadmin console to access
  # postgres web-ui
  # --------------------------------
  # pgadmin:
  #   container_name: pgadmin_container
  #   image: dpage/pgadmin4
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
  #   volumes:
  #     - ./servers.json:/pgadmin4/servers.json
  #   ports:
  #     - "${PGADMIN_PORT:-5050}:80"
  
  # connect:
  #   image: debezium/strimzi-connect
  #   build:
  #     context: debezium-strimzi
  #     args:
  #       DEBEZIUM_CONNECTOR_VERSION: "${DEBEZIUM_CONNECTOR_VERSION:-2.4.2.Final}"
  #       STRIMZI_VERSION: "${STRIMZI_VERSION:-latest-kafka-3.5.1}"
  #   ports:
  #    - 8083:8083
  #   links:
  #    - kafka
  #    - order-db
  #   environment:
  #    - KAFKA_LOG4J_OPTS=-Dlog4j.configuration=file:/opt/kafka/config/connect-log4j.properties
  #    - KAFKA_CONNECT_BOOTSTRAP_SERVERS=kafka:9092
  #    - |
  #        KAFKA_CONNECT_CONFIGURATION=
  #        key.converter=org.apache.kafka.connect.json.JsonConverter
  #        value.converter=org.apache.kafka.connect.json.JsonConverter
  #        key.converter.schemas.enable=false
  #        value.converter.schemas.enable=false
  #        group.id=connect
  #        offset.storage.topic=connect-offsets
  #        offset.storage.replication.factor=1
  #        config.storage.topic=connect-configs
  #        config.storage.replication.factor=1
  #        status.storage.topic=connect-status
  #        status.storage.replication.factor=1
  #        producer.interceptor.classes=io.debezium.tracing.DebeziumTracingProducerInterceptor
  #    - OTEL_SERVICE_NAME=kafka-connect
  #    - OTEL_TRACES_EXPORTER=otlp
  #    - OTEL_METRICS_EXPORTER=none
  #    - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
  #    - OTEL_TRACES_SAMPLER=always_on
  #    - STRIMZI_TRACING=opentelemetry
  #   command: /opt/kafka/kafka_connect_run.sh
  
  # order-service:
  #   image: debezium-examples/outbox-order-service:${DEBEZIUM_VERSION}
  #   build:
  #     context: order-service
  #     dockerfile: src/main/docker/Dockerfile.${QUARKUS_BUILD:-jvm}
  #   ports:
  #    - 8080:8080
  #   links:
  #    - kafka
  #    - order-db
  #    - jaeger
  #   environment:
  #    - QUARKUS_DEBEZIUM_OUTBOX_REMOVE_AFTER_INSERT=true
  #    - QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4317
  #   depends_on:
  #     order-db:
  #       condition: service_healthy
  #     connect:
  #       condition: service_started
  #   command: "./application -Dquarkus.datasource.jdbc.url=jdbc:postgresql://order-db:5432/orderdb?currentSchema=inventory -Dquarkus.datasource.username=postgresuser -Dquarkus.datasource.password=postgrespw"
  
  # shipment-service:
  #   image: debezium-examples/outbox-shipment-service:${DEBEZIUM_VERSION}
  #   build:
  #     context: shipment-service
  #     dockerfile: src/main/docker/Dockerfile.${QUARKUS_BUILD:-jvm}
  #   links:
  #    - kafka
  #    - shipment-db
  #    - jaeger
  #   environment:
  #     - QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4317
  #   depends_on:
  #     shipment-db:
  #       condition: service_healthy
  #     connect:
  #       condition: service_started

  # Following is for running Conduktor and accessing kafka cluster GUI
  postgresql:
    image: postgres:14
    hostname: postgresql
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "conduktor-platform"
      POSTGRES_USER: "conduktor"
      POSTGRES_PASSWORD: "change_me"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"

  conduktor-platform:
    image: conduktor/conduktor-platform:1.20.0
    depends_on:
      - postgresql
    ports:
      - "8080:8080"
    volumes:
      - conduktor_data:/var/conduktor
    environment:
      CDK_DATABASE_URL: "postgresql://conduktor:change_me@postgresql:5432/conduktor-platform"
      CDK_MONITORING_CORTEX-URL: http://conduktor-monitoring:9009/
      CDK_MONITORING_ALERT-MANAGER-URL: http://conduktor-monitoring:9010/
      CDK_MONITORING_CALLBACK-URL: http://conduktor-platform:8080/monitoring/api/
      CDK_MONITORING_NOTIFICATIONS-CALLBACK-URL: http://localhost:8080
      
  conduktor-monitoring:
    image: conduktor/conduktor-platform-cortex:1.20.0
    environment:
      CDK_CONSOLE-URL: "http://conduktor-platform:8080"

volumes:
  pg_data: {}
  conduktor_data: {}
